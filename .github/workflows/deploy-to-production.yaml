name: Deploy to production

on:
  release:
    types: [published]
  push:
    branches:
      - 'publish-site-gha'

env:
  hugo_image_cache_name: hugo-generated-images
  hugo_image_cache_path: /home/runner/work/docs-publishing/docs-publishing/docs-repo/resources/_gen/images/

jobs:
  deploy-to-production:
    if: github.repository_owner == 'nmelehan'
    runs-on: ubuntu-latest

    environment:
      name: deploy_to_production
      url: ${{ vars.DOCS_WEBSITE_URL }}

    steps:
    - name: Print github repo owner
      run: |
        echo $GITHUB_REPOSITORY_OWNER


    - name: Set up Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: '0.116.1'

    - name: Checkout docs repo
      uses: actions/checkout@v3
      with:
        path: 'docs-repo'

    - name: Print current docs repo branch/ref/commit
      working-directory: ./docs-repo
      run: |
        git status
        git log -1

    - name: Get linode-docs-theme version
      id: get-theme-version
      working-directory: ./docs-repo
      run: |
        LINODE_DOCS_THEME_VERSION=$(hugo mod graph | grep linode-docs-theme | cut -d '+' -f 1 | grep -o '[^-]*$')
        echo "VERSION=$LINODE_DOCS_THEME_VERSION" >> $GITHUB_OUTPUT

    - name: Set up SSH agent (linode-docs-theme repo deploy key)
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.LINODE_DOCS_THEME_DEPLOY_KEY_FOR_DOCS_DEPLOY_GHA }}

    - name: Checkout docs theme repo
      run: |
        git clone git@github.com:nmelehan/linode-docs-theme linode-docs-theme-repo

    - name: Check out theme repo commit from docs repo go.mod
      working-directory: ./linode-docs-theme-repo
      run: |
        git checkout ${{ steps.get-theme-version.outputs.VERSION }}

    - name: Print Linode Algolia admin tool version
      working-directory: ./linode-docs-theme-repo
      run: |
        cd scripts/linode_algolia_admin/
        go run main.go version

    - name: List contents of images dir
      continue-on-error: true
      run: ls -al ${{ env.hugo_image_cache_path }}

    - name: Restore Hugo generated images cache
      uses: ylemkimon/cache-restore@v2
      with:
        path: ${{ env.hugo_image_cache_path }}
        key: ${{ env.hugo_image_cache_name }}
        restore-keys: ${{ env.hugo_image_cache_name }}

    - name: List contents of images dir
      continue-on-error: true
      run: ls -al ${{ env.hugo_image_cache_path }}

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: Install dependencies (Node)
      working-directory: ./docs-repo
      run: npm ci

    - name: Build Hugo
      env:
        HUGOxPARAMSxSEARCH_CONFIG2xAPP_ID: ${{ vars.ALGOLIA_APP_ID }}
        HUGOxPARAMSxSEARCH_CONFIG2xAPI_KEY: ${{ vars.ALGOLIA_SEARCH_KEY }}
      working-directory: ./docs-repo
      run: |
        hugo config
        hugo -b "${{ vars.DOCS_WEBSITE_URL }}" --gc --minify -d public

    - name: List rendered files
      working-directory: ./docs-repo
      run: |
        sudo apt install -y tree
        tree -L 1 public

    - name: Set up SSH agent (docs webserver key)
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.DOCS_WEBSITE_RSYNC_PRIVATE_KEY }}

    - name: Rsync site to webserver
      run: |
        echo "${{ secrets.DOCS_WEBSITE_RSYNC_HOST_VERIFICATION_1 }}" > rsync_known_hosts
        echo "${{ secrets.DOCS_WEBSITE_RSYNC_HOST_VERIFICATION_2 }}" >> rsync_known_hosts

        rsync_to_destination() {
          rsync -r -e "ssh -o UserKnownHostsFile=rsync_known_hosts" \
            docs-repo/public/css \
            docs-repo/public/images \
            docs-repo/public/js \
            docs-repo/public/jslibs \
            docs-repo/public/linode \
            ${{ secrets.DOCS_WEBSITE_USER }}@$1:${{ secrets.DOCS_WEBSITE_RSYNC_DIR }}

          rsync -r -e "ssh -o UserKnownHostsFile=rsync_known_hosts" \
            --exclude="/css/" \
            --exclude="/images/" \
            --exclude="/js/" \
            --exclude="/jslibs/" \
            --exclude="/linode/" \
            --delete \
            docs-repo/public/ \
            ${{ secrets.DOCS_WEBSITE_USER }}@$1:${{ secrets.DOCS_WEBSITE_RSYNC_DIR }}
        }

        rsync_to_destination "${{ secrets.DOCS_WEBSITE_RSYNC_DESTINATION_1 }}"
        rsync_to_destination "${{ secrets.DOCS_WEBSITE_RSYNC_DESTINATION_2 }}"

        rm rsync_known_hosts

    - name: Update Algolia
      working-directory: ./linode-docs-theme-repo
      env:
        ALGOLIA_APP_ID: ${{ vars.ALGOLIA_APP_ID }}
        ALGOLIA_ADMIN_API_KEY: ${{ secrets.ALGOLIA_WRITE_KEY }}
      run: |
        cd scripts/linode_algolia_admin/

        # Hugo renders the site to the `public` directory within the docs repo.
        # This includes three files with Algolia index data:
        # - public/index.json
        # - public/api/index.json
        # - public/data/sections/index.json
        # The pushdocs command uploads this data to Algolia
        go run main.go pushdocs -source-dir ../../../docs-repo/public

        # The settings (e.g. ranking configuration) and synonyms for the
        # linode-merged index are stored in version control, and the
        # following command pushes those settings/synonyms to the Algolia app
        go run main.go -indices linode-merged push -replace settings,synonyms

        # The refresh-merge-and-push sequence assumes that the linode-wp and linode-community indices already exist in the Algolia app
        go run main.go sequence refresh-merge-and-push
